{"version":3,"sources":["constants/router.js","routers/index.js","modules/accounts/redux/index.js","stores/rootReducer.js","stores/rootSagas.js","App.js","stores/createStore.js","serviceWorker.js","index.js"],"names":["ROUTERS","MAIN_PAGE","LOGIN","SIGN_UP","HomeMain","lazy","Router","exact","path","component","accountSlice","createSlice","name","initialState","userInfo","isProcessing","type","token","checkEmailResponse","point","loginCount","errorLogin","validate","statusCode","errorMessageEmail","resendEmailResponse","dateLogin","findPasswordResponse","errorSignUp","dataLogin","mesgLogedUser","errorExistEmail","reducers","actions","reducer","appReducer","combineReducers","account","accountReducer","RootSagas","all","App","persistConfig","key","storage","stateReconciler","seamlessImmutableReconciler","whitelist","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","thunk","serializableCheck","persistedReducer","persistReducer","appReducers","store","configureStore","devTools","process","persistor","persistStore","run","rootSagas","createStore","className","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+FAMeA,IANC,CACdC,UAAU,IACVC,MAAM,SACNC,QAAS,a,yOCULC,EAAWC,gBAAK,kBAAM,sDAsBbC,EApBA,WASb,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMR,IAAQC,UAAWQ,UAAWL,Q,gFCLrDM,EAAeC,YAAY,CAC/BC,KAAM,WACNC,aAvBmB,CACnBC,SAAU,GACVC,cAAc,EACdC,KAAM,GACNC,MAAO,GACPC,mBAAoB,GACpBC,MAAO,GACPC,WAAY,GACZC,WAAY,GACZC,SAAU,EACVC,WAAY,KACZC,kBAAmB,GACnBC,oBAAqB,GACrBC,UAAW,KACXC,qBAAsB,GACtBC,YAAa,GACbC,UAAW,GACXC,cAAe,GACfC,gBAAiB,IAMjBC,SAAU,KAGJC,EAAqBvB,EAArBuB,QAASC,EAAYxB,EAAZwB,Q,YAECD,GAEHC,QC1BAC,EAJIC,YAAgB,CACjCC,QAASC,I,oCCDcC,GAAV,SAAUA,IAAV,iEACb,OADa,SACPC,YAAI,IADG,uCC0BAC,MAbf,WAAgB,IAAD,ECLA,WACb,IAAMC,EAAgB,CACpBC,IAAK,OACLC,YACAC,gBAAiBC,8BACjBC,UAAW,CAAC,YAKRC,EAAiBC,cACjBC,EAAU,sBACXC,YAAqB,CACtBC,OAAO,EACPC,mBAAmB,KAHP,CAKdL,IAUF,IAAMM,EAAmBC,yBAAeb,EAAec,GAEjDC,EAAQC,YAAe,CAC3BxB,QAASoB,EACTK,UAXcC,EAYdV,eAGIW,EAAYC,uBAAaL,GAK/B,OAFAT,EAAee,IAAIC,GAEZ,CAAEP,QAAOI,aDjCaI,GAArBR,EADK,EACLA,MAAOI,EADF,EACEA,UACf,OACE,yBAAKK,UAAU,OACb,kBAAC,IAAD,CAAaC,QAAS,KAAMN,UAAWA,GACrC,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,UEVUW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,WAAD,CAAUC,SAAU,yBAAKV,UAAU,UAAf,YAClB,kBAAC,EAAD,QAGJW,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6cd1de77.chunk.js","sourcesContent":["const ROUTERS = {\r\n  MAIN_PAGE: `/`,\r\n  LOGIN: `/login`,\r\n  SIGN_UP: '/sign-up',\r\n};\r\n\r\nexport default ROUTERS;\r\n","// @flow\r\n\r\nimport React, { lazy, Suspense } from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n\r\n// import { createBrowserHistory } from 'history';\r\n\r\nimport ROUTERS from 'constants/router';\r\n\r\n// import { API } from '../apis';\r\n// import PrivateRoute from './PrivateRoute';\r\n\r\nconst HomeMain = lazy(() => import('modules/home/components'));\r\n\r\nconst Router = () => {\r\n  // const history = createBrowserHistory();\r\n  // const token = useSelector((state) => state.account.token);\r\n  // const isAuthenticated = token !== '';\r\n\r\n  // if (token) {\r\n  //   API.setHeader('Authorization', `Bearer ${token}`);\r\n  // }\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Suspense>\r\n        <Switch>\r\n          <Route exact path={ROUTERS.MAIN_PAGE} component={HomeMain} />\r\n        </Switch>\r\n      </Suspense>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  userInfo: {},\r\n  isProcessing: false,\r\n  type: '',\r\n  token: '',\r\n  checkEmailResponse: {},\r\n  point: '',\r\n  loginCount: '',\r\n  errorLogin: '',\r\n  validate: 0,\r\n  statusCode: null,\r\n  errorMessageEmail: '',\r\n  resendEmailResponse: {},\r\n  dateLogin: null,\r\n  findPasswordResponse: {},\r\n  errorSignUp: '',\r\n  dataLogin: {},\r\n  mesgLogedUser: '',\r\n  errorExistEmail: '',\r\n};\r\n\r\nconst accountSlice = createSlice({\r\n  name: 'accounts',\r\n  initialState,\r\n  reducers: {},\r\n});\r\n\r\nconst { actions, reducer } = accountSlice;\r\n\r\nexport const {} = actions;\r\n\r\nexport default reducer;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport accountReducer from 'modules/accounts/redux';\r\n\r\nconst appReducer = combineReducers({\r\n  account: accountReducer,\r\n});\r\n\r\nexport default appReducer;\r\n","// import libs\r\nimport { all } from 'redux-saga/effects';\r\n\r\nexport default function* RootSagas() {\r\n  yield all([]);\r\n}\r\n","import React from 'react';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import './assets/css/slick.min.css';\r\n// import './assets/css/slick-theme.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n// Import Swiper styles\r\nimport 'swiper/swiper.scss';\r\nimport 'swiper/components/navigation/navigation.scss';\r\n// import 'swiper/components/pagination/pagination.scss';\r\nimport './App.scss';\r\nimport { Provider } from 'react-redux';\r\nimport Router from 'routers';\r\n\r\nimport createStore from './stores/createStore';\r\n\r\nfunction App() {\r\n  const { store, persistor } = createStore();\r\n  return (\r\n    <div className=\"App\">\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <Provider store={store}>\r\n          <Router />\r\n        </Provider>\r\n      </PersistGate>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// libs\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport logger from 'redux-logger';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport { seamlessImmutableReconciler } from 'redux-persist-seamless-immutable';\r\nimport appReducers from './rootReducer';\r\nimport rootSagas from './rootSagas';\r\n\r\n// creates the store\r\nexport default () => {\r\n  const persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: seamlessImmutableReconciler,\r\n    whitelist: ['account'],\r\n  };\r\n\r\n  /* ------------- Saga Middleware ------------- */\r\n\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middleware = [\r\n    ...getDefaultMiddleware({\r\n      thunk: false,\r\n      serializableCheck: false,\r\n    }),\r\n    sagaMiddleware,\r\n  ];\r\n\r\n  const devMode = process.env.NODE_ENV === 'development';\r\n\r\n  if (devMode) {\r\n    middleware.push(logger);\r\n  }\r\n\r\n  /* ------------- AutoRehydrate Enhancer ------------- */\r\n  const persistedReducer = persistReducer(persistConfig, appReducers);\r\n\r\n  const store = configureStore({\r\n    reducer: persistedReducer,\r\n    devTools: devMode,\r\n    middleware,\r\n  });\r\n\r\n  const persistor = persistStore(store);\r\n\r\n  // kick off root saga\r\n  sagaMiddleware.run(rootSagas);\r\n\r\n  return { store, persistor };\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Suspense fallback={<div className=\"d-none\">Loading</div>}>\r\n      <App />\r\n    </Suspense>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}